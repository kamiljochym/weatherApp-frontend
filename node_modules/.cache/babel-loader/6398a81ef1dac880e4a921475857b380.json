{"ast":null,"code":"var _jsxFileName = \"/home/kamil/projects/portfolio/weather-app/weather-frontend/src/components/weather/Hourly.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Hourly = _ref => {\n  let {\n    hourlyData\n  } = _ref;\n\n  //Pads number with a 0 if its shorter than 2 characters, returns a string.\n  const padNumber = numberToPad => {\n    return numberToPad.toString().padStart(2, '0');\n  }; //Using the info from the next 24hrs\n\n\n  const hourArray = [];\n\n  for (let i = 0; i < 24; i++) {\n    const unixDate = new Date(hourlyData[i].dt * 1000);\n    const time = padNumber(`${unixDate.getHours()}`);\n    const icon = hourlyData[i].weather[0].icon;\n    const rainProb = Math.round(hourlyData[i].pop * 100);\n    const temp = Math.round(hourlyData[i].temp);\n    const hourWeather = {\n      time: time,\n      icon: icon,\n      temp: temp,\n      rainProb: rainProb\n    };\n    hourArray.push(hourWeather);\n  } //Allows the horizontal element to be scrollable by the scroll wheel\n\n\n  const item = document.getElementById(\"hourly-wrapper\");\n\n  if (item) {\n    item.addEventListener(\"wheel\", function (e) {\n      const item = document.getElementById(\"hourly-wrapper\");\n      if (e.deltaY > 0) item.scrollLeft += 40;else item.scrollLeft -= 40;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hourly-wrapper\",\n    id: \"hourly-wrapper\",\n    children: hourArray.map((hour, Idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hourly-hour\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: hour.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${hour.icon}@2x.png`,\n          height: '70px'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [hour.temp, `\\u00B0`, \"C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), hour.rainProb === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hourly-rainProb\",\n        children: [hour.rainProb, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Hourly;\nexport default Hourly;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hourly\");","map":{"version":3,"sources":["/home/kamil/projects/portfolio/weather-app/weather-frontend/src/components/weather/Hourly.js"],"names":["React","useState","useEffect","Hourly","hourlyData","padNumber","numberToPad","toString","padStart","hourArray","i","unixDate","Date","dt","time","getHours","icon","weather","rainProb","Math","round","pop","temp","hourWeather","push","item","document","getElementById","addEventListener","e","deltaY","scrollLeft","map","hour","Idx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,MAAMC,MAAM,GAAG,QAAkB;AAAA,MAAjB;AAACC,IAAAA;AAAD,GAAiB;;AAE7B;AACA,QAAMC,SAAS,GAAIC,WAAD,IAAiB;AAC/B,WAAOA,WAAW,CAACC,QAAZ,GAAuBC,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAAP;AACH,GAFD,CAH6B,CAO7B;;;AACA,QAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrB,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASR,UAAU,CAACM,CAAD,CAAV,CAAcG,EAAd,GAAmB,IAA5B,CAAjB;AACA,UAAMC,IAAI,GAAGT,SAAS,CAAE,GAAEM,QAAQ,CAACI,QAAT,EAAoB,EAAxB,CAAtB;AAEA,UAAMC,IAAI,GAAGZ,UAAU,CAACM,CAAD,CAAV,CAAcO,OAAd,CAAsB,CAAtB,EAAyBD,IAAtC;AAEA,UAAME,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWhB,UAAU,CAACM,CAAD,CAAV,CAAcW,GAAd,GAAkB,GAA7B,CAAjB;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACC,KAAL,CAAWhB,UAAU,CAACM,CAAD,CAAV,CAAcY,IAAzB,CAAb;AAEA,UAAMC,WAAW,GAAG;AAChBT,MAAAA,IAAI,EAAEA,IADU;AAEhBE,MAAAA,IAAI,EAAEA,IAFU;AAGhBM,MAAAA,IAAI,EAAEA,IAHU;AAIhBJ,MAAAA,QAAQ,EAAEA;AAJM,KAApB;AAOAT,IAAAA,SAAS,CAACe,IAAV,CAAeD,WAAf;AAEH,GA5B4B,CA+B7B;;;AACA,QAAME,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;;AACA,MAAIF,IAAJ,EAAU;AACNA,IAAAA,IAAI,CAACG,gBAAL,CAAsB,OAAtB,EAA+B,UAAUC,CAAV,EAAa;AACxC,YAAMJ,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;AAEA,UAAIE,CAAC,CAACC,MAAF,GAAW,CAAf,EAAkBL,IAAI,CAACM,UAAL,IAAmB,EAAnB,CAAlB,KACKN,IAAI,CAACM,UAAL,IAAmB,EAAnB;AACR,KALD;AAMH;;AAID,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,EAAE,EAAC,gBAAnC;AAAA,cACKtB,SAAS,CAACuB,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACX;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAA,kBAAMD,IAAI,CAACnB;AAAX;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BAAK;AAAK,UAAA,GAAG,EAAG,oCAAmCmB,IAAI,CAACjB,IAAK,SAAxD;AAAkE,UAAA,MAAM,EAAE;AAA1E;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,mBAAMiB,IAAI,CAACX,IAAX,EAAkB,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAIKW,IAAI,CAACf,QAAL,KAAkB,CAAlB,gBACC,qCADD,gBAEC;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,mBAAkCe,IAAI,CAACf,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cANN;AAAA;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA5DD;;KAAMf,M;AA8DN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Hourly = ({hourlyData}) => {\n\n    //Pads number with a 0 if its shorter than 2 characters, returns a string.\n    const padNumber = (numberToPad) => {\n        return numberToPad.toString().padStart(2, '0')\n    }\n\n    //Using the info from the next 24hrs\n    const hourArray = []\n    \n    for (let i=0; i<24; i++) {\n        const unixDate = new Date(hourlyData[i].dt * 1000)\n        const time = padNumber(`${unixDate.getHours()}`)\n\n        const icon = hourlyData[i].weather[0].icon\n\n        const rainProb = Math.round(hourlyData[i].pop*100)\n        const temp = Math.round(hourlyData[i].temp)\n\n        const hourWeather = {\n            time: time,\n            icon: icon,\n            temp: temp,\n            rainProb: rainProb\n        }\n\n        hourArray.push(hourWeather)\n\n    }\n\n\n    //Allows the horizontal element to be scrollable by the scroll wheel\n    const item = document.getElementById(\"hourly-wrapper\");\n    if (item) {\n        item.addEventListener(\"wheel\", function (e) {\n            const item = document.getElementById(\"hourly-wrapper\");\n    \n            if (e.deltaY > 0) item.scrollLeft += 40;\n            else item.scrollLeft -= 40;\n        });\n    }\n    \n    \n\n    return (\n        <div className=\"hourly-wrapper\" id=\"hourly-wrapper\">\n            {hourArray.map((hour, Idx) => (\n                <div className=\"hourly-hour\">\n                    <div>{hour.time}</div>\n                    <div><img src={`http://openweathermap.org/img/wn/${hour.icon}@2x.png`} height={'70px'}></img></div>\n                    <div>{hour.temp}{`\\u00B0`}C</div>\n                    {hour.rainProb === 0 \n                    ? <></> \n                    : <div className=\"hourly-rainProb\">{hour.rainProb}%</div>\n                    }\n                    \n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Hourly;\n\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/kamil/projects/portfolio/weather-app/weather-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Filter from './components/Filter';\nimport Forecast from './components/Forecast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [autocomplete, setAutocomplete] = useState([]);\n  const [showAutocomplete, setShowAutocomplete] = useState(false);\n  const [forecastData, setForecastData] = useState();\n  const [locationName, setLocationName] = useState();\n\n  const handleNewSearch = event => {\n    const searchName = event.target.value.toLowerCase();\n\n    if (searchName === '') {\n      setShowAutocomplete(false);\n      return;\n    } else {\n      //Gets top 5 search results from back end\n      axios.get(`http://localhost:3001/autocomplete/${searchName}`).then(response => {\n        const data = response.data.predictions;\n        const predictions = [];\n\n        for (let term of data) {\n          predictions.push(term.description);\n          console.log(term);\n        }\n\n        setShowAutocomplete(true);\n        setAutocomplete(predictions);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  const sendCoordinates = term => {\n    const toSend = {\n      name: term\n    };\n    console.log(toSend);\n    axios.post('http://localhost:3001/coords', toSend).then(response => {\n      console.log(response);\n      setForecastData(response.data);\n      setLocationName(term);\n    }).catch(error => console.log(error));\n  };\n\n  const handleFocusOn = () => {\n    setShowAutocomplete(true);\n  };\n\n  const handleFocusOff = () => {\n    setShowAutocomplete(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchBox\",\n      children: /*#__PURE__*/_jsxDEV(Filter, {\n        handleNewSearch: handleNewSearch,\n        autocomplete: autocomplete,\n        showAutocomplete: showAutocomplete,\n        sendCoordinates: sendCoordinates,\n        handleFocusOff: handleFocusOff,\n        handleFocusOn: handleFocusOn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n      forecastData: forecastData,\n      locationName: locationName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"37fB4RWrtDuxChpmr9+yEp29E3I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/kamil/projects/portfolio/weather-app/weather-frontend/src/App.js"],"names":["React","useState","axios","Filter","Forecast","App","autocomplete","setAutocomplete","showAutocomplete","setShowAutocomplete","forecastData","setForecastData","locationName","setLocationName","handleNewSearch","event","searchName","target","value","toLowerCase","get","then","response","data","predictions","term","push","description","console","log","catch","error","sendCoordinates","toSend","name","post","handleFocusOn","handleFocusOff"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\nimport axios from 'axios'\n\nimport Filter from './components/Filter'\nimport Forecast from './components/Forecast';\n\nfunction App() {\n\n  const [ autocomplete, setAutocomplete ] = useState([])\n  const [ showAutocomplete, setShowAutocomplete ] = useState(false)\n  const [ forecastData, setForecastData ] = useState()\n  const [ locationName, setLocationName ] = useState()\n \n\n  const handleNewSearch = (event) => {\n\n    const searchName = event.target.value.toLowerCase();\n\n    if (searchName === '') {\n      setShowAutocomplete(false)\n      return;\n    }\n    else {\n      //Gets top 5 search results from back end\n      axios\n        .get(`http://localhost:3001/autocomplete/${searchName}`)\n        .then(response => {\n          const data = response.data.predictions\n\n          const predictions = []\n          for (let term of data) {\n            predictions.push(term.description)\n            console.log(term);\n\n          }\n          setShowAutocomplete(true)\n          setAutocomplete(predictions)\n        \n        })\n        .catch(error => {\n          console.log(error);\n        })\n    }\n  }\n  \n  const sendCoordinates = (term) => {\n\n    const toSend = {\n        name: term\n    }\n    console.log(toSend);\n    axios\n        .post('http://localhost:3001/coords', toSend)\n        .then(response => {\n            console.log(response)\n            setForecastData(response.data)\n            setLocationName(term)\n        })\n        .catch(error => console.log(error))\n  }  \n\n  const handleFocusOn = () => {\n    setShowAutocomplete(true)\n  }\n\n  const handleFocusOff = () => {\n    setShowAutocomplete(false)\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"searchBox\">\n\n        <Filter handleNewSearch={handleNewSearch} autocomplete={autocomplete} \n        showAutocomplete={showAutocomplete} sendCoordinates={sendCoordinates}\n        handleFocusOff={handleFocusOff} handleFocusOn={handleFocusOn}/>\n                \n      </div>\n      <Forecast forecastData={forecastData} locationName={locationName}/>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}